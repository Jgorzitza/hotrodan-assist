#!/usr/bin/env python3
import json
import textwrap
from pathlib import Path
from datetime import datetime, timezone

try:
    import yaml
except ImportError as exc:
    raise SystemExit("PyYAML is required to generate manager artifacts") from exc

ROOT = Path(__file__).resolve().parent.parent
REGISTRY = ROOT / "coordination" / "registry" / "agents.yaml"
TEMPLATES_DIR = ROOT / "coordination" / "templates"
OUTPUT_DOC = ROOT / "docs" / "agents.md"
HANDOVER_DIR = ROOT / "handover"
INSTRUCTIONS_DIR = ROOT / "agent"
DIGESTS_DIR = ROOT / "coordination" / "digests"
INSTRUCTION_MAP = ROOT / "coordination" / "registry" / "instruction-map.json"
HEADER_TEMPLATE = """<!-- GENERATED BY manager. DO NOT EDIT.\n     Source: coordination/registry/agents.yaml + coordination/templates/*\n     Submit changes via: coordination/inbox/<agent>/*.md\n     Instructions-Version: {version}  Generated: {timestamp} -->"""


def load_registry():
    data = yaml.safe_load(REGISTRY.read_text())
    if not isinstance(data, dict):
        raise SystemExit("agents.yaml must be a mapping")
    return data


def save_registry(data):
    REGISTRY.write_text(yaml.safe_dump(data, sort_keys=False))


def render_agents_index(data, timestamp):
    template = (TEMPLATES_DIR / "agents.md.hbs").read_text()
    header = HEADER_TEMPLATE.format(version=data["version"], timestamp=timestamp)
    rows = []
    for agent_id, agent in data["agents"].items():
        mission = agent.get("responsibilities", [""])[0]
        mvp = "; ".join(agent.get("mvp_tasks", [])) or "TBD"
        rows.append(f"| `{agent_id}` | {mission} | {mvp} |")
    table = "\n".join(rows)
    content = template.replace("{{HEADER}}", header).replace("{{AGENTS_TABLE}}", table)
    OUTPUT_DOC.parent.mkdir(parents=True, exist_ok=True)
    OUTPUT_DOC.write_text(content + "\n")


def format_list(items):
    if not items:
        return "- (none)"
    return "\n".join(f"- {line}" for line in items)


def render_handover(agent_id, agent, header):
    template = (TEMPLATES_DIR / "handover.md.hbs").read_text()
    replacements = {
        "{{HEADER}}": header,
        "{{AGENT_NAME}}": agent.get("name", agent_id),
        "{{RESPONSIBILITIES}}": format_list(agent.get("responsibilities", [])),
        "{{MVP_TASKS}}": format_list(agent.get("mvp_tasks", [])),
        "{{CONSTRAINTS}}": format_list(agent.get("constraints", [])),
        "{{INPUTS}}": format_list(agent.get("inputs", [])),
        "{{OUTPUTS}}": format_list(agent.get("outputs", [])),
        "{{INTEGRATIONS}}": format_list(agent.get("integration_points", [])),
        "{{BACKLOG}}": format_list(agent.get("post_mvp_backlog", [])),
    }
    content = template
    for key, value in replacements.items():
        content = content.replace(key, value)
    HANDOVER_DIR.mkdir(parents=True, exist_ok=True)
    (HANDOVER_DIR / f"{agent_id}.md").write_text(content + "\n")


def render_instructions(agent_id, agent, header):
    template = (TEMPLATES_DIR / "instructions.md.hbs").read_text()
    mission = "\n".join(f"- {m}" for m in agent.get("responsibilities", [])) or "- TBD"
    replacements = {
        "{{HEADER}}": header,
        "{{AGENT_NAME}}": agent.get("name", agent_id),
        "{{MISSION}}": mission,
        "{{INPUTS}}": format_list(agent.get("inputs", [])),
        "{{OUTPUTS}}": format_list(agent.get("outputs", [])),
        "{{CONSTRAINTS}}": format_list(agent.get("constraints", [])),
        "{{MVP_TASKS}}": format_list(agent.get("mvp_tasks", [])),
        "{{KPIS}}": format_list(agent.get("kpis", [])),
        "{{FEATURE_FLAGS}}": format_list(agent.get("feature_flags", [])),
        "{{INTEGRATIONS}}": format_list(agent.get("integration_points", [])),
        "{{BACKLOG}}": format_list(agent.get("post_mvp_backlog", [])),
    }
    content = template
    for key, value in replacements.items():
        content = content.replace(key, value)
    agent_dir = INSTRUCTIONS_DIR / agent_id
    agent_dir.mkdir(parents=True, exist_ok=True)
    (agent_dir / "INSTRUCTIONS.md").write_text(content + "\n")


def build_instruction_map(managed_files):
    INSTRUCTION_MAP.write_text(json.dumps({"managed": managed_files}, indent=2) + "\n")


def write_digest(version, timestamp, agents):
    DIGESTS_DIR.mkdir(exist_ok=True)
    digest_path = DIGESTS_DIR / f"{timestamp.replace(':', '').replace('-', '').replace('T', '_').replace('Z','')}__instructions.md"
    lines = ["## Instructions Regeneration", "", f"- Version: {version}", f"- Generated: {timestamp}", ""]
    for agent_id, agent in agents.items():
        lines.append(f"- `{agent_id}`: MVP tasks â†’ {', '.join(agent.get('mvp_tasks', [])) or 'TBD'}")
    digest_path.write_text("\n".join(lines) + "\n")


def main():
    data = load_registry()
    now = datetime.now(timezone.utc).replace(microsecond=0).isoformat()
    data["generated"] = now
    save_registry(data)
    header = HEADER_TEMPLATE.format(version=data["version"], timestamp=now)
    render_agents_index(data, now)
    managed_files = [
        "coordination/registry/agents.yaml",
        "coordination/registry/instruction-map.json",
        "coordination/templates/agents.md.hbs",
        "coordination/templates/handover.md.hbs",
        "coordination/templates/instructions.md.hbs",
        "docs/agents.md",
    ]
    for agent_id, agent in data["agents"].items():
        render_handover(agent_id, agent, header)
        render_instructions(agent_id, agent, header)
        managed_files.append(f"handover/{agent_id}.md")
        managed_files.append(f"agent/{agent_id}/INSTRUCTIONS.md")
    build_instruction_map(sorted(set(managed_files)))
    write_digest(data["version"], now, data["agents"])


if __name__ == "__main__":
    main()
