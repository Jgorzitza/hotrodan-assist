version: "3.9"
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app
    volumes: [ "pgdata:/var/lib/postgresql/data" ]
    ports: [ "5432:5432" ]

  redis:
    image: redis:7
    ports: [ "6379:6379" ]

  rag-api:
    build: ./app/rag_api
    env_file: .env
    volumes: [ "./data:/data", "./:/workspace" ]
    ports: [ "8001:8001" ]
    depends_on: [ db, redis ]

  assistants:
    build: ./app/assistants
    env_file: .env
    volumes: [ "./:/workspace" ]
    ports: [ "8002:8002" ]
    depends_on: [ db, redis, rag-api ]

  sync:
    build: ./app/sync
    env_file: .env
    volumes: [ "./:/workspace" ]
    depends_on: [ db, redis ]

  approval-app:
    build: ./app/approval-app
    env_file: .env
    ports: [ "5173:5173" ]
    depends_on: [ assistants ]

  inventory-api:
    build: .
    env_file: .env
    volumes:
      - "./:/workspace"
      - "./data:/data"
    ports:
      - "8004:8004"
    depends_on: [db, redis, rag-api]
    command: python3 -m uvicorn inventory_api:app --host 0.0.0.0 --port 8004

  connectors:
    build: ./app/connectors
    env_file: .env
    volumes:
      - "./:/workspace"
    ports:
      - "8003:8003"
    depends_on: [db, redis]
    command: python3 -m uvicorn connectors.main:app --host 0.0.0.0 --port 8003

  dashboard:
    build: ./apps/dashboard
    env_file: apps/dashboard/.env
    ports:
      - "8080:8080"
    depends_on: [db, redis]
    volumes:
      - "./apps/dashboard/cloudflare:/app/cloudflare"
    command: >
      sh -c "
        if [ ! -f /app/cloudflare/credentials.json ]; then
          echo 'Cloudflare tunnel not configured. Run setup-tunnel.sh first.'
          npm run start
        else
          cloudflared tunnel --config /app/cloudflare/tunnel-config.yml run &
          npm run start
        fi
      "

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --config /app/cloudflare/tunnel-config.yml run
    volumes:
      - "./apps/dashboard/cloudflare:/app/cloudflare"
    depends_on: [dashboard]
    restart: unless-stopped

volumes:
  pgdata:
